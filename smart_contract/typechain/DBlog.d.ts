/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DBlogInterface extends ethers.utils.Interface {
  functions: {
    "dislike(string)": FunctionFragment;
    "like(string)": FunctionFragment;
    "post(string,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "dislike", values: [string]): string;
  encodeFunctionData(functionFragment: "like", values: [string]): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "dislike", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;

  events: {
    "Dislike(address,string)": EventFragment;
    "Like(address,string)": EventFragment;
    "Post(address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Dislike"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Like"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Post"): EventFragment;
}

export class DBlog extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DBlogInterface;

  functions: {
    dislike(
      postId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "dislike(string)"(
      postId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    like(postId: string, overrides?: Overrides): Promise<ContractTransaction>;

    "like(string)"(
      postId: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    post(
      content: string,
      replyTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "post(string,string)"(
      content: string,
      replyTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  dislike(postId: string, overrides?: Overrides): Promise<ContractTransaction>;

  "dislike(string)"(
    postId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  like(postId: string, overrides?: Overrides): Promise<ContractTransaction>;

  "like(string)"(
    postId: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  post(
    content: string,
    replyTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "post(string,string)"(
    content: string,
    replyTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    dislike(postId: string, overrides?: CallOverrides): Promise<void>;

    "dislike(string)"(postId: string, overrides?: CallOverrides): Promise<void>;

    like(postId: string, overrides?: CallOverrides): Promise<void>;

    "like(string)"(postId: string, overrides?: CallOverrides): Promise<void>;

    post(
      content: string,
      replyTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "post(string,string)"(
      content: string,
      replyTo: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Dislike(author: string | null, postId: null): EventFilter;

    Like(author: string | null, postId: null): EventFilter;

    Post(author: string | null, content: null, replyTo: null): EventFilter;
  };

  estimateGas: {
    dislike(postId: string, overrides?: Overrides): Promise<BigNumber>;

    "dislike(string)"(
      postId: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    like(postId: string, overrides?: Overrides): Promise<BigNumber>;

    "like(string)"(postId: string, overrides?: Overrides): Promise<BigNumber>;

    post(
      content: string,
      replyTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "post(string,string)"(
      content: string,
      replyTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dislike(
      postId: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "dislike(string)"(
      postId: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    like(postId: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "like(string)"(
      postId: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    post(
      content: string,
      replyTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "post(string,string)"(
      content: string,
      replyTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
